# ======================
# fzf
# ======================
[[plugins]]
repo = 'junegunn/fzf'
on_event = 'BufRead'
build = './install --all'
merged = 0

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
on_event = 'BufRead'

hook_add = '''
nmap <Space> [fzf]

nnoremap [fzf]b :Buffers<CR>
nnoremap [fzf]c :Commands<CR>
nnoremap [fzf]g :GFiles<CR>
command! FZFMru call fzf#run({
\  'source':  v:oldfiles,
\  'sink':    'e',
\  'options': '-m -x +s',
\  'down':    '40%'})
nnoremap [fzf]f :FZFMru<CR>

command! -bang -nargs=* Rg
\ call fzf#vim#grep(
\ 'rg --column --line-number --hidden --ignore-case --no-heading --color=always '.shellescape(<q-args>), 1,
\ <bang>0 ? fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'up:60%')
\ : fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'right:50%:hidden', '?'),
\ <bang>0)
nnoremap [fzf]r :Rg<CR>

let g:fzf_action = {
    \ 'ctrl-q': 'wall | bdelete',
    \ 'ctrl-t': 'tab split',
    \ 'ctrl-x': 'split',
    \ 'ctrl-v': 'vsplit' }

'''

# ======================
# Complesion, Snippets
# ======================
[[plugins]]
repo = 'Shougo/neosnippet'
hook_source = '''
  let g:neosnippet#snippets_directory='~/.vim/bundle/neosnippet-snippets/snippets/'

  " Plugin key-mappings.
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)

  " SuperTab like snippets behavior.
  imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)"
  \: pumvisible() ? "\<C-n>" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)"
  \: "\<TAB>"

  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
'''
on_i  = 1
on_ft = ['snippet']
depends = ['neosnippet-snippets']

# ==========
# language
# ==========
[[plugins]]
repo = 'w0rp/ale'
on_event = 'BufRead'
hook_add = '''
let g:ale_completion_enabled = 1
let g:ale_fix_on_save = 0
let g:ale_lint_on_flietype_changed = 0
let g:ale_lint_on_save = 1
" let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_delay = 500
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1
let g:ale_sign_column_always = 0
let g:ale_sign_error = "\uf05e"
let g:ale_sign_warning = "\uf071"
let g:ale_statusline_format = ["\uf05e %d", "\uf071 %d", "\uf00c"]
'''

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = 'markdown'

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
hook_add = '''
autocmd FileType go nmap <leader>b  <Plug>(go-build)
autocmd FileType go nmap <leader>r  <Plug>(go-run)
autocmd FileType go nmap <leader>t  <Plug>(go-test)
autocmd FileType go nmap <leader>c  <Plug>(go-coverage-toggle)
autocmd FileType go nmap <Leader>i  <Plug>(go-info)

" ***.go <-> ***_test.go
autocmd Filetype go command! -bang A call go#alternate#Switch(<bang>0, 'edit')
autocmd Filetype go command! -bang AV call go#alternate#Switch(<bang>0, 'vsplit')
autocmd Filetype go command! -bang AS call go#alternate#Switch(<bang>0, 'split')
autocmd Filetype go command! -bang AT call go#alternate#Switch(<bang>0, 'tabe')<Paste>

" <C-t> :GoDefPop 
" <S-K> :GoDoc
" :GoRename
" ]] -> jump to next function
" [[ -> jump to previous function

let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_interfaces = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_list_type = "quickfix"
let g:go_fold_enable = ['block', 'import', 'varconst', 'package_comment']
let g:go_fmt_command = "goimports"
let g:go_fmt_experimental = 1
let g:go_snippet_engine = "neosnippet"

let g:go_def_mapping_enabled = 0
let g:go_doc_keywordprg_enabled = 0

" run :GoBuild or :GoTestCompile based on the go file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction
'''

[[plugins]]
repo = 'udalov/kotlin-vim'
on_ft = 'kotlin'

[[plugins]]
repo = 'vim-ruby/vim-ruby'
on_ft = 'ruby'

[[plugins]]
repo = 'tpope/vim-rails'
on_ft = 'ruby'

[[plugins]]
repo = 'vim-php/tagbar-phpctags.vim'
on_ft = 'php'

[[plugins]]
repo = 'nikvdp/ejs-syntax'
on_ft = 'ejs'

[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = ['javascript', 'javascript.jsx']

[[plugins]]
repo = 'maxmellon/vim-jsx-pretty'
on_ft = ['javascript', 'javascript.jsx']

[[plugins]]
repo = 'ternjs/tern_for_vim'
on_ft = ['javascript', 'javascript.jsx']
do = 'npm install'

[[plugins]]
repo = 'posva/vim-vue'
on_ft = ['vue']
hook_add = '''
set iskeyword+=$
set iskeyword+=-
autocmd MyAutoCmd FileType vue syntax sync fromstart
let g:ft = ''
function! NERDCommenter_before()
  if &ft == 'vue'
    let g:ft = 'vue'
    let stack = synstack(line('.'), col('.'))
    if len(stack) > 0
      let syn = synIDattr((stack)[0], 'name')
      if len(syn) > 0
        exe 'setf ' . substitute(tolower(syn), '^vue_', '', '')
      endif
    endif
  endif
endfunction
function! NERDCommenter_after()
  if g:ft == 'vue'
    setf vue
    let g:ft = ''
  endif
endfunction
'''


[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = 'typescript'

[[plugins]]
repo = 'othree/html5.vim'
on_ft = 'html'

[[plugins]]
repo = 'hashivim/vim-terraform'
on_ft = ['tf', 'terraform']
hook_add = '''
let g:terraform_align=1
let g:terraform_fold_sections=1
let g:terraform_remap_spacebar=1
let g:terraform_fmt_on_save=1
'''
