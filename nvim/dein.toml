[[plugins]]
repo = 'Shougo/dein.vim'

# =======
# LSP
# =======
# [[plugins]]
# repo = 'autozimu/LanguageClient-neovim'
# build = 'bash install.sh'
# rev = 'next'
# hook_add = '''
# let g:LanguageClient_serverCommands = {
#     \ 'go': ['gopls'],
#     \ 'vue': ['vls'],
#     \ 'javascript': ['vls'],
#     \ 'rust': ['rls'],
#     \ }

# nnoremap <F5> :call LanguageClient_contextMenu()<CR>
# " Or map each action separately
# nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
# nnoremap <silent> <C-]> :call LanguageClient#textDocument_definition()<CR>
# nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>
# nnoremap <silent> <F3> :call LanguageClient#textDocument_formatting()<CR>
# '''

[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
if executable('gopls')
  augroup LspGo
    au!
    autocmd User lsp_setup call lsp#register_server({
        \ 'name': 'go-lang',
        \ 'cmd': {server_info->['bingo', '-mode', 'stdio']},
        \ 'whitelist': ['go'],
        \ })
    autocmd FileType go setlocal omnifunc=lsp#complete
    autocmd FileType go nmap <buffer> gd <plug>(lsp-definition)
    autocmd FileType go nmap <buffer> ,n <plug>(lsp-next-error)
    autocmd FileType go nmap <buffer> ,p <plug>(lsp-previous-error)
  augroup END
endif
'''

# =======
# style
# =======
[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'jacoborus/tender.vim'

[[plugins]]
repo = 'w0ng/vim-hybrid'

# Git wrappper
# ex) :Gdiff, :Gstatus, :Gblame
[[plugins]]
repo = 'tpope/vim-fugitive'

# Show git diff
[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
let g:gitgutter_sign_added = '✚'
let g:gitgutter_sign_modified = '➜'
let g:gitgutter_sign_removed = '✘'
'''

[[plugins]]
repo = 'mgee/lightline-bufferline'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
      \ 'colorscheme': 'tender',
      \ 'tabline': {'left': [['buffers']], 'right': [['close']]},
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ],
      \   'right': [ [ 'lineinfo' ], ['percent'], [ 'ale_error', 'ale_warning', 'ale_ok', 'char_code', 'fileformat', 'fileencoding', 'filetype' ] ]
      \ },
      \ 'component_function': {
      \   'fugitive': 'LightLineFugitive',
      \   'filename': 'LightLineFilename',
      \   'fileformat': 'LightLineFileformat',
      \   'filetype': 'LightLineFiletype',
      \   'fileencoding': 'LightLineFileencoding',
      \   'mode': 'LightLineMode',
      \   'char_code': 'LightLineCharCode',
      \ },
      \ 'component_function_visible_condition': {
      \   'mode': 1,
      \ },
      \ 'component_expand': {
      \   'ale_error': 'LightLineAleError',
      \   'ale_warning': 'LightLineAleWarning',
      \   'ale_ok': 'LightLineAleOk',
      \   'buffers': 'lightline#bufferline#buffers',
      \ },
      \ 'component_type': {
      \   'ale_error': 'error',
      \   'ale_waring': 'waring',
      \   'ale_ok': 'ok',
      \   'buffers': 'tabsel',
      \ },
      \ 'separator': {'left': '⮀', 'right': '⮂'},
      \ 'subseparator': {'left': '⮁', 'right': '⮃'}
      \ }

augroup LightLineOnALE
  autocmd!
  autocmd User ALELint call lightline#update()
augroup END

function! LightLineModified()
  return &ft =~ 'help' ? '' : &modified ? '' : &modifiable ? '' : '-'
endfunction

function! LightLineReadonly()
  return &ft !~? 'help' && &readonly ? '' : ''
endfunction

function! LightLineFilepath() abort
  let l:path_string = substitute(expand('%:h'), $HOME, '~', '')
  if winwidth(0) < 120 && len(l:path_string) > 30
    let l:path_string = substitute(l:path_string, '\v([^/])[^/]*%(/)@=', '\1', 'g')
  endif
  return l:path_string
endfunction

function! LightLineFilename()
  let fname = expand('%:t')
  return fname == 'ControlP' ? g:lightline.ctrlp_item :
        \ fname == '__Tagbar__' ? g:lightline.fname :
        \ fname =~ '__Gundo\|NERD_tree' ? '' :
        \ &ft == 'vimfiler' ? vimfiler#get_status_string() :
        \ &ft == 'denite' ? LightLineDenite() :
        \ &ft == 'vimshell' ? vimshell#get_status_string() :
        \ ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
        \ ('' != fname ? LightLineFilepath().' '.fname : '[No Name]') .
        \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
endfunction

" ref. https://gist.github.com/pocari/84c78efa38b5c2fc1f659d1aac3face8
function! LightLineDenite()
  let mode_str = substitute(denite#get_status_mode(), "-\\| ", "", "g")
  call lightline#link(tolower(mode_str[0]))
  return mode_str
endfunction

function! LightLineFugitive()
  try
    if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && &ft !~? 'vimfiler' && exists('*fugitive#head')
      let mark = ' '  " edit here for cool mark
      let _ = fugitive#head()
      return strlen(_) ? mark._ : ''
    endif
  catch
  endtry
  return ''
endfunction

function! LightLineFileformat()
  return winwidth(0) > 120 ? &fileformat . (exists('*WebDevIconsGetFileFormatSymbol') ? ' ' . WebDevIconsGetFileFormatSymbol() : '') : ''
endfunction

function! LightLineFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . (exists('*WebDevIconsGetFileTypeSymbol') ? ' ' . WebDevIconsGetFileTypeSymbol() : ''): 'no ft') : ''
endfunction

function! LightLineFileencoding()
  return winwidth(0) > 120 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! LightLineMode()
  let fname = expand('%:t')
  return fname == '__Tagbar__' ? 'Tagbar' :
        \ fname == 'ControlP' ? 'CtrlP' :
        \ fname == '__Gundo__' ? 'Gundo' :
        \ fname == '__Gundo_Preview__' ? 'Gundo Preview' :
        \ fname =~ 'NERD_tree' ? 'NERDTree' :
        \ &ft == 'unite' ? 'Unite' :
        \ &ft == 'denite' ? 'Denite' :
        \ &ft == 'vimfiler' ? 'VimFiler' :
        \ &ft == 'vimshell' ? 'VimShell' :
        \ winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! LightLineCharCode() abort
  if winwidth(0) <= 120
    return ''
  endif
  " if char on cursor is `Λ̊`, :ascii returns below.
  " <Λ> 923, 16進数 039b, 8進数 1633 < ̊> 778, 16進数 030a, 8進数 1412
  redir => l:tmp | silent! ascii | redir END
  let l:chars = []
  call substitute(l:tmp, '<.>\s\+\d\+,\s\+\S\+ \x\+,\s\+\S\+ \d\+', '\=add(l:chars, submatch(0))', 'g')
  if len(l:chars) == 0
    return ''
  endif
  let l:ascii = []
  for l:c in l:chars
    let l:m = matchlist(l:c, '<\(.\)>\s\+\d\+,\s\+\S\+ \(\x\+\)')
    if len(l:m) > 0
      call add(l:ascii, printf('%s %s', l:m[1], l:m[2]))
    endif
  endfor
  return join(l:ascii, ', ')
endfunction

function! LightLineAleError() abort
  return s:ale_string(0)
endfunction

function! LightLineAleWarning() abort
  return s:ale_string(1)
endfunction

function! LightLineAleOk() abort
  return s:ale_string(2)
endfunction

function! s:ale_string(mode)
  if !exists('g:ale_buffer_info')
    return ''
  endif

  let l:buffer = bufnr('%')
  let l:counts = ale#statusline#Count(l:buffer)
  let [l:error_format, l:warning_format, l:no_errors] = g:ale_statusline_format

  if a:mode == 0 " Error
    let l:errors = l:counts.error + l:counts.style_error
    return l:errors ? printf(l:error_format, l:errors) : ''
  elseif a:mode == 1 " Warning
    let l:warnings = l:counts.warning + l:counts.style_warning
    return l:warnings ? printf(l:warning_format, l:warnings) : ''
  endif

  return l:counts.total == 0? l:no_errors: ''
endfunction
'''

# ==========
# Markdown
# ==========
[[plugins]]
repo = 'kannokanno/previm'

[[plugins]]
repo = 'tyru/open-browser.vim'
hook_add = '''
au BufRead,BufNewFile *.md set filetype=markdown
let g:previm_open_cmd = 'open -a "Google Chrome"'
'''

# =======
# tags
# =======
[[plugins]]
# :TagsGenerate!
repo = 'szw/vim-tags'
hook_add = '''
set tags=tags
let g:vim_tags_project_tags_command = "/usr/local/bin/ctags -R {OPTIONS} {DIRECTORY} 2>/dev/null"
let g:vim_tags_gems_tags_command = "/usr/local/bin/ctags -R {OPTIONS} `bundle show --paths` 2>/dev/null"
'''

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
let g:tagbar_left = 0
let g:tagbar_autofocus = 1
noremap <leader>t :<c-u>TagbarToggle<cr>
'''

[[plugins]]
repo = 'hewes/unite-gtags'
hook_add = '''
" カーソル下の呼び出し元一覧を出力
nnoremap <silent> <Leader>tr  :<C-u>Unite gtags/ref:<CR>
" カーソル下の定義元を出力
nnoremap <silent> <Leader>td  :<C-u>Unite gtags/def:<CR>
" タグファイル内grep
nnoremap <silent> <Leader>tg  :<C-u>Unite gtags/grep:<CR>
'''

# [[plugins]]
# repo = ''
# ================
# Directory Tree
# ================
[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
nnoremap <silent><C-e> :NERDTreeToggle<CR>
'''

# =======
# Utils
# =======
[[plugins]]
repo = 'kana/vim-submode'

[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'Shougo/vimproc'

[[plugins]]
# <C-y>, to expansion
# ex) div>ul>li, p+a+p, ul>li*3, ^, #, ., $, {}
repo = 'mattn/emmet-vim'

[[plugins]]
repo = 'scrooloose/nerdcommenter'
hook_add = '''
" <Leader>c<Space> -> Toggle Comment
" <Leader>ci -> Invert Comment
" <Leader>cA -> Append Comment
let g:NERDSpaceDelims = 1
let g:NERDShutUp = 1
let g:NERDDefaultAlign='left'
'''

# ==========
# Snippets
# ==========
[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
let g:deoplete#enable_at_startup = 1
inoremap <expr><CR>  pumvisible() ? deoplete#close_popup() : "<CR>"
'''

# [[plugins]]
# repo = 'Shougo/neosnippet.vim'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'puppetlabs/puppet-syntax-vim'

[[plugins]]
repo = 'gko/vim-coloresque'
