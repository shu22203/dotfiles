[[plugins]]
repo = 'Shougo/dein.vim'

# =======
# LSP
# =======
[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
let g:lsp_log_verbose = 1
let g:lsp_log_file = expand('~/.cache/tmp/vim-lsp.log')
let g:lsp_diagnostics_enabled = 0

if executable('gopls')
  augroup LspGo
    au!
    autocmd User lsp_setup call lsp#register_server({
        \ 'name': 'glpls',
        \ 'cmd': {server_info->['gopls', '-mode', 'stdio']},
        \ 'whitelist': ['go'],
        \ })
    autocmd FileType go setlocal omnifunc=lsp#complete
    autocmd FileType go nmap <buffer> <C-]> <plug>(lsp-definition)
    autocmd FileType go nmap <buffer> <Leader>n <plug>(lsp-next-error)
    autocmd FileType go nmap <buffer> <Leader>p <plug>(lsp-previous-error)
  augroup END
endif

if executable('solargraph')
    " gem install solargraph
    au User lsp_setup call lsp#register_server({
        \ 'name': 'solargraph',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'solargraph stdio']},
        \ 'initialization_options': {"diagnostics": "true"},
        \ 'whitelist': ['ruby'],
        \ })
  endif

if executable('pyls')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info->['pyls']},
        \ 'whitelist': ['python'],
        \ })
  endif

if executable('java') && filereadable(expand('~/lsp/eclipse.jdt.ls/plugins/org.eclipse.equinox.launcher_1.5.300.v20190213-1655.jar'))
    au User lsp_setup call lsp#register_server({
        \ 'name': 'eclipse.jdt.ls',
        \ 'cmd': {server_info->[
        \     'java',
        \     '-Declipse.application=org.eclipse.jdt.ls.core.id1',
        \     '-Dosgi.bundles.defaultStartLevel=4',
        \     '-Declipse.product=org.eclipse.jdt.ls.core.product',
        \     '-Dlog.level=ALL',
        \     '-noverify',
        \     '-Dfile.encoding=UTF-8',
        \     '-Xmx1G',
        \     '-jar',
        \     expand('~/lsp/eclipse.jdt.ls/plugins/org.eclipse.equinox.launcher_1.5.300.v20190213-1655.jar'),
        \     '-configuration',
        \     expand('~/lsp/eclipse.jdt.ls/config_win'),
        \     '-data',
        \     getcwd()
        \ ]},
        \ 'whitelist': ['java'],
        \ })
  endif

function! s:configure_lsp() abort
  setlocal omnifunc=lsp#complete   " オムニ補完を有効化
  " LSP用にマッピング
  nnoremap <buffer> <C-]> :<C-u>LspDefinition<CR>
  nnoremap <buffer> gd :<C-u>LspDefinition<CR>
  nnoremap <buffer> gD :<C-u>LspReferences<CR>
  nnoremap <buffer> gs :<C-u>LspDocumentSymbol<CR>
  nnoremap <buffer> gS :<C-u>LspWorkspaceSymbol<CR>
  nnoremap <buffer> gQ :<C-u>LspDocumentFormat<CR>
  vnoremap <buffer> gQ :LspDocumentRangeFormat<CR>
  nnoremap <buffer> K :<C-u>LspHover<CR>
  nnoremap <buffer> <F1> :<C-u>LspImplementation<CR>
  nnoremap <buffer> <F2> :<C-u>LspRename<CR>
endfunction
'''

# =======
# style
# =======
[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'jacoborus/tender.vim'

[[plugins]]
repo = 'w0ng/vim-hybrid'

# Git wrappper
# ex) :Gdiff, :Gstatus, :Gblame, :Gbrowse
[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'tpope/vim-rhubarb'

# Show git diff
[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
let g:gitgutter_sign_added = '✚'
let g:gitgutter_sign_modified = '➜'
let g:gitgutter_sign_removed = '✘'
'''

[[plugins]]
repo = 'mgee/lightline-bufferline'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
      \ 'colorscheme': 'tender',
      \ 'tabline': {
      \   'left': [
      \             ['bufferinfo'],
      \             ['separator'],
      \             ['bufferbefore', 'buffercurrent', 'bufferafter'],
      \           ],
      \   'right': [
      \             ['close']
      \           ]
      \ },
      \ 'active': {
      \   'left': [
      \             ['mode', 'paste' ],
      \             ['readonly', 'filename', 'modified']
      \           ],
      \   'right': [
      \             ['linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok'],
      \             ['fugitive', 'percent'],
      \             ['fileformat', 'fileencoding', 'filetype', 'lineinfo']
      \            ]
      \ },
      \ 'component_function': {
      \   'bufferinfo': 'lightline#buffer#bufferinfo',
      \   'fugitive': 'LightLineFugitive',
      \   'ale': 'LightLineAle',
      \ },
      \ 'component_expand': {
      \   'buffercurrent': 'lightline#buffer#buffercurrent',
      \   'bufferbefore': 'lightline#buffer#bufferbefore',
      \   'bufferafter': 'lightline#buffer#bufferafter',
      \   'linter_checking': 'lightline#ale#checking',
      \   'linter_warnings': 'lightline#ale#warnings',
      \   'linter_errors': 'lightline#ale#errors',
      \   'linter_ok': 'lightline#ale#ok',
      \ },
      \ 'component_type': {
      \   'buffercurrent': 'tabsel',
      \   'bufferbefore': 'raw',
      \   'bufferafter': 'raw',
      \   'linter_checking': 'left',
      \   'linter_warnings': 'warning',
      \   'linter_errors': 'error',
      \   'linter_ok': 'left',
      \ },
      \ 'component': {
      \   'separator': '',
      \ },
      \ 'separator': {'left': "\ue0b0", 'right': "\ue0b2"},
      \ 'subseparator': {'left': "\ue0b1", 'right': "\ue0b3"}
      \ }

function! LightLineFugitive()
  try
    if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && &ft !~? 'vimfiler' && exists('*fugitive#head')
      let mark = "\ue0a0 "
      let _ = fugitive#head()
      return strlen(_) ? mark._ : ''
    endif
  catch
  endtry
  return ''
endfunction
'''

[[plugins]]
repo = 'maximbaz/lightline-ale'
depends = ['lightline.vim', 'ale']
hook_add = '''
let g:lightline#ale#indicator_checking = " \uf110 "
let g:lightline#ale#indicator_warnings = "\uf071 "
let g:lightline#ale#indicator_errors = "\uf05e "
let g:lightline#ale#indicator_ok = "\uf00c "
'''

[[plugins]]
repo = 'taohexxx/lightline-buffer'
depends = ['lightline.vim', 'ale']
hook_add = '''
let g:lightline_buffer_logo = "\ue62b "
let g:lightline_buffer_readonly_icon = "\ufafa"
let g:lightline_buffer_modified_icon = "\ufac1"
let g:lightline_buffer_git_icon = "\ue0a0 "
let g:lightline_buffer_ellipsis_icon = '..'
let g:lightline_buffer_expand_left_icon = '◀ '
let g:lightline_buffer_expand_right_icon = ' ▶'
let g:lightline_buffer_active_buffer_left_icon = ''
let g:lightline_buffer_active_buffer_right_icon = ''
let g:lightline_buffer_separator_icon = '  '

" lightline-buffer function settings
let g:lightline_buffer_enable_devicons = 1 
let g:lightline_buffer_show_bufnr = 0
let g:lightline_buffer_fname_mod = ':t'
let g:lightline_buffer_excludes = ['vimfiler']

let g:lightline_buffer_maxflen = 30
let g:lightline_buffer_maxfextlen = 3
let g:lightline_buffer_minflen = 16
let g:lightline_buffer_minfextlen = 3
let g:lightline_buffer_reservelen = 20
'''

# ==========
# Markdown
# ==========
[[plugins]]
repo = 'kannokanno/previm'

[[plugins]]
repo = 'tyru/open-browser.vim'
hook_add = '''
au BufRead,BufNewFile *.md set filetype=markdown
let g:previm_open_cmd = 'open -a "Google Chrome"'
'''

# =======
# tags
# =======
[[plugins]]
# :TagsGenerate!
repo = 'szw/vim-tags'
hook_add = '''
set tags=tags
let g:vim_tags_project_tags_command = "/usr/local/bin/ctags -R {OPTIONS} {DIRECTORY} 2>/dev/null"
let g:vim_tags_gems_tags_command = "/usr/local/bin/ctags -R {OPTIONS} `bundle show --paths` 2>/dev/null"
'''

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
let g:tagbar_left = 0
let g:tagbar_autofocus = 1
noremap <leader>t :<c-u>TagbarToggle<cr>
'''

[[plugins]]
repo = 'hewes/unite-gtags'
hook_add = '''
" カーソル下の呼び出し元一覧を出力
nnoremap <silent> <Leader>tr  :<C-u>Unite gtags/ref:<CR>
" カーソル下の定義元を出力
nnoremap <silent> <Leader>td  :<C-u>Unite gtags/def:<CR>
" タグファイル内grep
nnoremap <silent> <Leader>tg  :<C-u>Unite gtags/grep:<CR>
'''

# [[plugins]]
# repo = ''
# ================
# Directory Tree
# ================
[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
nnoremap <silent><C-e> :NERDTreeToggle<CR>
'''

# =======
# Utils
# =======
[[plugins]]
repo = 'kana/vim-submode'

[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'Shougo/vimproc'

[[plugins]]
# <C-y>, to expansion
# ex) div>ul>li, p+a+p, ul>li*3, ^, #, ., $, {}
repo = 'mattn/emmet-vim'

[[plugins]]
repo = 'scrooloose/nerdcommenter'
hook_add = '''
" <Leader>c<Space> -> Toggle Comment
" <Leader>ci -> Invert Comment
" <Leader>cA -> Append Comment
let g:NERDSpaceDelims = 1
let g:NERDShutUp = 1
let g:NERDDefaultAlign='left'
'''

# ==========
# Snippets
# ==========
[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
let g:deoplete#enable_at_startup = 1
inoremap <expr><CR>  pumvisible() ? deoplete#close_popup() : "<CR>"
'''

# [[plugins]]
# repo = 'Shougo/neosnippet.vim'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'puppetlabs/puppet-syntax-vim'

[[plugins]]
repo = 'gko/vim-coloresque'
